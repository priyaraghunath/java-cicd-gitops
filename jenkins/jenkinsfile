pipeline {
  agent any

  environment {
    IMAGE_TAG = 'your-docker-image'       // your Docker image tag here
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Build with Maven') {
      steps {
        withMaven(maven: 'your-maven-tool') {
          sh 'mvn clean package'
        }
      }
    }

    stage('Build and Push Docker Image') {
      steps {
        sh '''
          # Build Docker image
          docker build -t $IMAGE_TAG .

          # Login to AWS ECR (if using ECR)
          aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 123456789012.dkr.ecr.us-east-2.amazonaws.com

          # Push image
          docker push $IMAGE_TAG
        '''
      }
    }

    stage('Kubernetes Deploy') {
      steps {
        dir('gitops') {
          withCredentials([file(credentialsId: 'kubeconfig-credentials-id', variable: 'KUBECONFIG')]) {
            sh '''
              # Install kubectl if missing
              if ! command -v kubectl > /dev/null 2>&1; then
                echo "Installing kubectl..."
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                chmod +x kubectl
                mkdir -p $HOME/.local/bin
                mv kubectl $HOME/.local/bin/
                export PATH=$HOME/.local/bin:$PATH
              fi

              echo "Using kubeconfig file at $KUBECONFIG"
              ls -l "$KUBECONFIG"

              export KUBECONFIG=$KUBECONFIG

              # Apply deployment
              kubectl apply -f deployment.yaml

              # Wait for rollout
              kubectl rollout status deployment/myapp
            '''
          }
        }
      }
    }
  }
}
