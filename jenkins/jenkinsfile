pipeline {
  agent any

  tools {
    maven 'Maven 3.8.6'
  }

  environment {
    SONAR_TOKEN = credentials('sonar-token')
    GIT_USER = 'priyaraghunath'
    GIT_EMAIL = 'priyankaraghunath98@gmail.com'
    AWS_REGION = 'us-east-2'
    ECR_REGISTRY = '682033504000.dkr.ecr.us-east-2.amazonaws.com'
    ECR_REPO = 'myapp'
    IMAGE_TAG = "${ECR_REGISTRY}/${ECR_REPO}:${BUILD_NUMBER}"
    HOME = "${env.WORKSPACE}" // Ensure HOME is writable for user-mode AWS CLI install
    PATH = "${env.WORKSPACE}/.local/bin:${env.PATH}"
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/priyaraghunath/java-cicd-gitops.git'
      }
    }

    stage('Build') {
      steps {
        dir('app/myapp') {
          sh 'mvn clean install'
        }
      }
    }

    stage('SonarQube Analysis') {
      steps {
        dir('app/myapp') {
          withSonarQubeEnv('MySonar') {
            sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN'
          }
        }
      }
    }

    stage('Docker Build and Push') {
      steps {
        dir('app/myapp') {
          withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
            sh '''
              # Install AWS CLI in user mode if not present
              if ! command -v aws &> /dev/null; then
                echo "Installing AWS CLI (user mode)..."
                curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                unzip -q awscliv2.zip
                ./aws/install -i $HOME/.local/aws-cli -b $HOME/.local/bin
              fi
              export PATH="$HOME/.local/bin:$PATH"
              aws --version

              # Authenticate Docker to AWS ECR
              aws ecr get-login-password --region $AWS_REGION | \
                docker login --username AWS --password-stdin $ECR_REGISTRY

              # Build and push Docker image
              docker build -t $IMAGE_TAG .
              docker push $IMAGE_TAG
            '''
          }
        }
      }
    }
  }
}
